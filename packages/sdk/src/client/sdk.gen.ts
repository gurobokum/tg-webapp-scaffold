// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from "@hey-api/client-fetch";
import type {
  AuthMeData,
  AuthMeResponse,
  PostWebhookData,
  PostWebhookError,
  TgCreditsListPackagesData,
  TgCreditsListPackagesResponse,
  TgCreditsListPackagesError,
  TgCreditsSendInvoiceData,
  TgCreditsSendInvoiceError,
  RootData,
  RootResponse,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Me
 */
export const authMe = <ThrowOnError extends boolean = false>(
  options?: Options<AuthMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthMeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-telegram-auth",
        type: "apiKey",
      },
    ],
    url: "/tgbot/auth/",
    ...options,
  });
};

/**
 * Post Webhook
 */
export const postWebhook = <ThrowOnError extends boolean = false>(
  options?: Options<PostWebhookData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    unknown,
    PostWebhookError,
    ThrowOnError
  >({
    url: "/tgbot/webhook",
    ...options,
  });
};

/**
 * List Packages
 * Get list of available packages
 */
export const tgCreditsListPackages = <ThrowOnError extends boolean = false>(
  options?: Options<TgCreditsListPackagesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    TgCreditsListPackagesResponse,
    TgCreditsListPackagesError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-telegram-auth",
        type: "apiKey",
      },
    ],
    url: "/credits/packages",
    ...options,
  });
};

/**
 * Send Invoice
 * Send payment invoice for user
 */
export const tgCreditsSendInvoice = <ThrowOnError extends boolean = false>(
  options: Options<TgCreditsSendInvoiceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    unknown,
    TgCreditsSendInvoiceError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-telegram-auth",
        type: "apiKey",
      },
    ],
    url: "/credits/send_invoice",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Root
 */
export const root = <ThrowOnError extends boolean = false>(
  options?: Options<RootData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    RootResponse,
    unknown,
    ThrowOnError
  >({
    url: "/",
    ...options,
  });
};
